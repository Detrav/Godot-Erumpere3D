[gd_resource type="VisualShader" load_steps=24 format=3 uid="uid://o8nr4aqnlaya"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ik6k3"]
input_name = "velocity"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y1n18"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_b4ki2"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_5jq28"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, -20, 0)]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mt407"]
input_name = "delta"

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_pixf3"]
default_input_values = [0, 0, 1, 4]
operator = 3

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_g2jcr"]
default_input_values = [0, 0.0, 1, 10.0]
operator = 3

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_k1t1m"]
default_input_values = [0, 0, 1, 4]
operator = 2

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_bc1tj"]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_rjn87"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.4, 0.15, 0.15)]
operator = 1

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_6rsq3"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_4eq1r"]
default_input_values = [0, 0.0, 1, 2.0, 2, 0.0]

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_em686"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_p37p4"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_7m4r6"]
constant = 2.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gdkif"]
input_name = "index"

[sub_resource type="VisualShaderNodeBooleanConstant" id="VisualShaderNodeBooleanConstant_37v2n"]
constant = true

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_j30br"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_j6lmf"]
default_input_values = [0, 0.0, 1, 10.0]
operator = 3

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_b5pbj"]
default_input_values = [0, 0, 1, 16]
operator = 3

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_vthu4"]
default_input_values = [0, 0, 1, 16]
operator = 2

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_ogvqg"]
operator = 1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_excrg"]
default_input_values = [0, 0.0, 1, 10.0]
operator = 3

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// BooleanConstant:3
		bool n_out3p0 = true;


// ParticleRandomness:15
		float n_in15p1 = -1.00000;
		float n_in15p2 = 1.00000;
		float n_out15p0 = __randf_range(__seed, n_in15p1, n_in15p2);


// ParticleRandomness:17
		float n_in17p1 = -1.00000;
		float n_in17p2 = 1.00000;
		float n_out17p0 = __randf_range(__seed, n_in17p1, n_in17p2);


// VectorCompose:16
		float n_in16p1 = 2.00000;
		vec3 n_out16p0 = vec3(n_out15p0, n_in16p1, n_out17p0);


// FloatConstant:19
		float n_out19p0 = 2.000000;


// VectorOp:18
		vec3 n_out18p0 = n_out16p0 * vec3(n_out19p0);


// Input:2
		uint n_out2p0 = INDEX;


// IntOp:6
		int n_in6p1 = 16;
		int n_out6p0 = int(n_out2p0) / n_in6p1;


// FloatOp:5
		float n_in5p1 = 10.00000;
		float n_out5p0 = float(n_out6p0) / n_in5p1;


// IntOp:7
		int n_in7p1 = 16;
		int n_out7p0 = n_out6p0 * n_in7p1;


// IntOp:8
		int n_out8p0 = int(n_out2p0) - n_out7p0;


// IntOp:10
		int n_in10p1 = 4;
		int n_out10p0 = n_out8p0 / n_in10p1;


// FloatOp:9
		float n_in9p1 = 10.00000;
		float n_out9p0 = float(n_out10p0) / n_in9p1;


// IntOp:12
		int n_in12p1 = 4;
		int n_out12p0 = n_out10p0 * n_in12p1;


// IntOp:13
		int n_out13p0 = n_out8p0 - n_out12p0;


// FloatOp:11
		float n_in11p1 = 10.00000;
		float n_out11p0 = float(n_out13p0) / n_in11p1;


// VectorCompose:4
		vec3 n_out4p0 = vec3(n_out5p0, n_out9p0, n_out11p0);


// VectorOp:14
		vec3 n_in14p1 = vec3(0.40000, 0.15000, 0.15000);
		vec3 n_out14p0 = n_out4p0 - n_in14p1;


// StartOutput:0
		ACTIVE = n_out3p0;
		if(ACTIVE) {
			VELOCITY = n_out18p0;
			if (RESTART_POSITION) {
				TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(n_out14p0, 1.0));
				if (RESTART_VELOCITY) {
					VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
				}
				TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
			}
		}


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:2
		vec3 n_out2p0 = VELOCITY;


// Input:6
		float n_out6p0 = DELTA;


// VectorOp:5
		vec3 n_in5p1 = vec3(0.00000, -20.00000, 0.00000);
		vec3 n_out5p0 = vec3(n_out6p0) * n_in5p1;


// VectorOp:4
		vec3 n_out4p0 = n_out2p0 + n_out5p0;


// ProcessOutput:0
		VELOCITY = n_out4p0;


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(1480, 180)
nodes/start/2/node = SubResource("VisualShaderNodeInput_gdkif")
nodes/start/2/position = Vector2(-1560, -100)
nodes/start/3/node = SubResource("VisualShaderNodeBooleanConstant_37v2n")
nodes/start/3/position = Vector2(100, 100)
nodes/start/4/node = SubResource("VisualShaderNodeVectorCompose_j30br")
nodes/start/4/position = Vector2(280, 220)
nodes/start/5/node = SubResource("VisualShaderNodeFloatOp_j6lmf")
nodes/start/5/position = Vector2(100, 220)
nodes/start/6/node = SubResource("VisualShaderNodeIntOp_b5pbj")
nodes/start/6/position = Vector2(-1260, -100)
nodes/start/7/node = SubResource("VisualShaderNodeIntOp_vthu4")
nodes/start/7/position = Vector2(-1060, 60)
nodes/start/8/node = SubResource("VisualShaderNodeIntOp_ogvqg")
nodes/start/8/position = Vector2(-860, 240)
nodes/start/9/node = SubResource("VisualShaderNodeFloatOp_excrg")
nodes/start/9/position = Vector2(100, 340)
nodes/start/10/node = SubResource("VisualShaderNodeIntOp_pixf3")
nodes/start/10/position = Vector2(-540, 320)
nodes/start/11/node = SubResource("VisualShaderNodeFloatOp_g2jcr")
nodes/start/11/position = Vector2(100, 460)
nodes/start/12/node = SubResource("VisualShaderNodeIntOp_k1t1m")
nodes/start/12/position = Vector2(-300, 480)
nodes/start/13/node = SubResource("VisualShaderNodeIntOp_bc1tj")
nodes/start/13/position = Vector2(-129.755, 696.582)
nodes/start/14/node = SubResource("VisualShaderNodeVectorOp_rjn87")
nodes/start/14/position = Vector2(680, 540)
nodes/start/15/node = SubResource("VisualShaderNodeParticleRandomness_6rsq3")
nodes/start/15/position = Vector2(680, 140)
nodes/start/16/node = SubResource("VisualShaderNodeVectorCompose_4eq1r")
nodes/start/16/position = Vector2(1000, 200)
nodes/start/17/node = SubResource("VisualShaderNodeParticleRandomness_em686")
nodes/start/17/position = Vector2(680, 300)
nodes/start/18/node = SubResource("VisualShaderNodeVectorOp_p37p4")
nodes/start/18/position = Vector2(1180, 220)
nodes/start/19/node = SubResource("VisualShaderNodeFloatConstant_7m4r6")
nodes/start/19/position = Vector2(1000, 400)
nodes/start/connections = PackedInt32Array(3, 0, 0, 0, 5, 0, 4, 0, 2, 0, 6, 0, 6, 0, 5, 0, 6, 0, 7, 0, 2, 0, 8, 0, 7, 0, 8, 1, 9, 0, 4, 1, 8, 0, 10, 0, 10, 0, 9, 0, 11, 0, 4, 2, 10, 0, 12, 0, 8, 0, 13, 0, 12, 0, 13, 1, 13, 0, 11, 0, 4, 0, 14, 0, 14, 0, 0, 4, 15, 0, 16, 0, 17, 0, 16, 2, 16, 0, 18, 0, 18, 0, 0, 1, 19, 0, 18, 1)
nodes/process/2/node = SubResource("VisualShaderNodeInput_ik6k3")
nodes/process/2/position = Vector2(-209.876, 245.259)
nodes/process/3/node = SubResource("VisualShaderNodeInput_y1n18")
nodes/process/3/position = Vector2(-440, 440)
nodes/process/4/node = SubResource("VisualShaderNodeVectorOp_b4ki2")
nodes/process/4/position = Vector2(180, 300)
nodes/process/5/node = SubResource("VisualShaderNodeVectorOp_5jq28")
nodes/process/5/position = Vector2(-100, 400)
nodes/process/6/node = SubResource("VisualShaderNodeInput_mt407")
nodes/process/6/position = Vector2(-386.132, 393.966)
nodes/process/connections = PackedInt32Array(2, 0, 4, 0, 5, 0, 4, 1, 6, 0, 5, 0, 4, 0, 0, 1)
metadata/_edit_res_path = "res://Actors/Brick/BrickBreakParticles.tres"
